name: Docker Build and Push
run-name: ${{ github.actor }} is building Docker images üê≥

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

jobs:
  docker-build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    
    env:
      REGISTRY: ghcr.io
      IMAGE_BASE: ${{ github.repository }}
      # Lowercase versions for cache refs (required by GitHub Container Registry)
      CACHE_BASE: ghcr.io/liamhardman/fm-dash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify registry authentication
        run: |
          echo "üîê Verifying GitHub Container Registry authentication..."
          echo "Registry: ${{ env.REGISTRY }}"
          echo "Username: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          
          # Test registry access
          docker pull hello-world || echo "Docker pull test failed, continuing..."

      # Extract metadata for fm-dash-unified
      - name: Extract metadata for unified image
        id: meta-unified
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-unified
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=test,enable={{is_default_branch}}
          flavor: |
            latest=false
          labels: |
            org.opencontainers.image.title=FM-Dash Unified (Test)
            org.opencontainers.image.description=A comprehensive platform for analyzing Football Manager player data (Frontend + Backend) - Test Build
            org.opencontainers.image.vendor=Liam Hardman
            org.opencontainers.image.licenses=MIT

      # Extract metadata for fm-dash-frontend
      - name: Extract metadata for frontend image
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=test,enable={{is_default_branch}}
          flavor: |
            latest=false
          labels: |
            org.opencontainers.image.title=FM-Dash Frontend (Test)
            org.opencontainers.image.description=FM-Dash Vue.js frontend application - Test Build
            org.opencontainers.image.vendor=Liam Hardman
            org.opencontainers.image.licenses=MIT

      # Extract metadata for fm-dash-backend
      - name: Extract metadata for backend image
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=test,enable={{is_default_branch}}
          flavor: |
            latest=false
          labels: |
            org.opencontainers.image.title=FM-Dash Backend (Test)
            org.opencontainers.image.description=FM-Dash Go backend API - Test Build
            org.opencontainers.image.vendor=Liam Hardman
            org.opencontainers.image.licenses=MIT

      # Build and push unified image
      - name: Build and push unified Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
          tags: ${{ steps.meta-unified.outputs.tags }}
          labels: ${{ steps.meta-unified.outputs.labels }}
          build-args: |
            VITE_API_BASE_URL=/api
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=${{ env.CACHE_BASE }}-unified:buildcache
          cache-to: type=registry,ref=${{ env.CACHE_BASE }}-unified:buildcache,mode=max
          provenance: false
          sbom: false

      # Build and push frontend image
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=${{ env.CACHE_BASE }}-frontend:buildcache
          cache-to: type=registry,ref=${{ env.CACHE_BASE }}-frontend:buildcache,mode=max
          provenance: false
          sbom: false

      # Build and push backend image
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=${{ env.CACHE_BASE }}-backend:buildcache
          cache-to: type=registry,ref=${{ env.CACHE_BASE }}-backend:buildcache,mode=max
          provenance: false
          sbom: false

      - name: Docker build summary
        run: |
          echo "üê≥ Docker Build Summary (Test/PR)"
          echo "================================="
          echo ""
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "üîç PR Test Build - Images built but not pushed to registry"
            echo "üìù This is a test build for pull request validation"
          else
            echo "‚úÖ Manual trigger - Images built and pushed"
          fi
          echo ""
          echo "üè∑Ô∏è Unified Image Tags:"
          echo "${{ steps.meta-unified.outputs.tags }}"
          echo ""
          echo "üè∑Ô∏è Frontend Image Tags:"
          echo "${{ steps.meta-frontend.outputs.tags }}"
          echo ""
          echo "üè∑Ô∏è Backend Image Tags:"
          echo "${{ steps.meta-backend.outputs.tags }}"
          echo ""
          echo "üì¶ Registry: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}"
          echo "üèóÔ∏è Platforms: linux/amd64, linux/arm64"
          echo ""
          echo "‚ÑπÔ∏è  Note: For production images with semantic version tags,"
          echo "   create a release on the gh-release branch which will"
          echo "   trigger the release workflow with proper versioning."
          echo ""
          echo "üîó Container Registry: https://github.com/${{ github.repository }}/pkgs"

  # Security scans are now handled in the release workflow for production images
  # This workflow is only for PR testing and manual triggers 