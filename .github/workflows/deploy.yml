name: FM-Dash Release Pipeline
run-name: ${{ github.actor }} is creating FM-Dash release artifacts 🚀

on:
  push:
    branches: [ gh-release ]
  release:
    types: [published]

jobs:
  # Quick code quality check (informational only)
  code-quality-check:
    name: Quick Code Quality Check
    runs-on: ubuntu-latest
    continue-on-error: true # Don't block deployment if this fails
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # Removed cache to prevent artifacts

      - name: Install dependencies
        run: npm ci

      - name: Quick Biome check
        run: |
          echo "🔍 Quick code quality check with Biome..."
          npm run lint:check || echo "⚠️ Code quality issues found (not blocking deployment)"

      - name: Code quality notice
        if: always()
        run: |
          echo "📝 Code quality check completed (informational only)"
          echo "🚀 Deployment will proceed regardless of code quality results"
          echo "💡 For detailed checks, see the 'Code Quality Checks' workflow"

  create-release-artifacts:
    needs: [code-quality-check]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          # No cache to prevent artifacts

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: |
          echo "🏗️ Building frontend for release..."
          npm run build:prod

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          # No cache to prevent artifacts

      - name: Build Go backend
        run: |
          echo "🏗️ Building Go backend for release..."
          cd src/api
          go build -o ../../fm-dash-backend .

      - name: Create release archives
        run: |
          echo "📦 Creating release archives..."
          
          # Create frontend build archive
          cd dist && tar -czf ../fm-dash-frontend.tar.gz . && cd ..
          
          # Create source code archive (excluding node_modules, dist, etc.)
          tar -czf fm-dash-source.tar.gz \
            --exclude='node_modules' \
            --exclude='dist' \
            --exclude='.git' \
            --exclude='*.log' \
            --exclude='coverage' \
            --exclude='src/api/coverage' \
            .

      - name: Upload release artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./fm-dash-frontend.tar.gz
          asset_name: fm-dash-frontend-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload backend binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./fm-dash-backend
          asset_name: fm-dash-backend-${{ github.event.release.tag_name }}
          asset_content_type: application/octet-stream

      - name: Upload source archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./fm-dash-source.tar.gz
          asset_name: fm-dash-source-${{ github.event.release.tag_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Release artifacts summary
        run: |
          echo "📦 Release Artifacts Created"
          echo "============================"
          echo ""
          echo "✅ Frontend build archive: fm-dash-frontend-${{ github.event.release.tag_name }}.tar.gz"
          echo "✅ Backend binary: fm-dash-backend-${{ github.event.release.tag_name }}"
          echo "✅ Source code archive: fm-dash-source-${{ github.event.release.tag_name }}.tar.gz"
          echo ""
          echo "🚀 All artifacts are now available in the GitHub release!"
          echo "📋 Docker image can be built locally using the provided Dockerfile"

  build-summary:
    needs: [code-quality-check]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/gh-release'
    
    steps:
      - name: Build summary for push
        run: |
          echo "🎯 Build Summary for gh-release branch"
          echo "======================================"
          echo ""
          echo "✅ Code quality check completed"
          echo "📝 No artifacts created for branch pushes"
          echo "🏷️ Create a GitHub release to generate artifacts"
          echo ""
          echo "💡 To create artifacts:"
          echo "   1. Go to GitHub > Releases"
          echo "   2. Click 'Create a new release'"
          echo "   3. Choose a tag and publish"
          echo "   4. Artifacts will be automatically generated" 